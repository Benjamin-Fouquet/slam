.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_example_generate_parametric_surfaces.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_example_generate_parametric_surfaces.py:


.. _example_generation_parametric_surfaces:

===================================
Generating parametric surfaces in slam
===================================


.. code-block:: default


    # Authors:
    # Guillaume Auzias <guillaume.auzias@univ-amu.fr>
    # Julien Barr√®s <julien.barres@etu.univ-amu.fr>

    # License: BSD (3-clause)
    # sphinx_gallery_thumbnail_number = 2









Importation of slam modules


.. code-block:: default

    import slam.generate_parametric_surfaces as sgps
    import slam.plot as splt
    import numpy as np








Generating a quadrix surface


.. code-block:: default


    K = [1, 1]
    quadric = sgps.generate_quadric(K, nstep=[20, 20], ax=3, ay=1,
                                    random_sampling=True,
                                    ratio=0.3,
                                    random_distribution_type='gamma')
    quadric_mean_curv = \
        sgps.quadric_curv_mean(K)(np.array(quadric.vertices[:, 0]),
                                  np.array(quadric.vertices[:, 1]))

    visb_sc = splt.visbrain_plot(mesh=quadric, tex=quadric_mean_curv,
                                 caption='quadric',
                                 cblabel='mean curvature')

    visb_sc.preview()





.. image:: /auto_examples/images/sphx_glr_example_generate_parametric_surfaces_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/toz/miniconda3/envs/trimesh_visbrain/lib/python3.6/site-packages/matplotlib/figure.py:445: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      % get_backend())




Generating an ellipsiods


.. code-block:: default


    nstep = 50
    randomSampling = True
    a = 2
    b = 1
    ellips = sgps.generate_ellipsiod(a, b, nstep, randomSampling)

    visb_sc = splt.visbrain_plot(mesh=ellips, caption='ellipsoid')

    visb_sc.preview()





.. image:: /auto_examples/images/sphx_glr_example_generate_parametric_surfaces_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/toz/miniconda3/envs/trimesh_visbrain/lib/python3.6/site-packages/matplotlib/figure.py:445: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      % get_backend())




Generating a sphere


.. code-block:: default

    sphere_regular = sgps.generate_sphere_icosahedron(subdivisions=3, radius=4)


    visb_sc = splt.visbrain_plot(mesh=sphere_regular, caption='sphere_regular')

    visb_sc.preview()





.. image:: /auto_examples/images/sphx_glr_example_generate_parametric_surfaces_003.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/toz/miniconda3/envs/trimesh_visbrain/lib/python3.6/site-packages/matplotlib/figure.py:445: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      % get_backend())




Generating a more randomized sphere (random sampling with the same
number of vertices)


.. code-block:: default


    sphere_random = \
        sgps.generate_sphere_random_sampling(
            vertex_number=sphere_regular.vertices.shape[0],
            radius=4)

    visb_sc = splt.visbrain_plot(mesh=sphere_random, caption='sphere_random',
                                 visb_sc=visb_sc)

    visb_sc.preview()





.. image:: /auto_examples/images/sphx_glr_example_generate_parametric_surfaces_004.png
    :class: sphx-glr-single-img





Computation of the volume and volume error of the spheres


.. code-block:: default


    analytical_vol = (4 / 3) * np.pi * np.power(4, 3)
    print('volume error for regular sampling: {:.3f}'.format(
        sphere_regular.volume - analytical_vol))
    print('volume error for random sampling: {:.3f}'.format(
        sphere_random.volume - analytical_vol))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    volume error for regular sampling: -2.307
    volume error for random sampling: -4.921





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.093 seconds)


.. _sphx_glr_download_auto_examples_example_generate_parametric_surfaces.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: example_generate_parametric_surfaces.py <example_generate_parametric_surfaces.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: example_generate_parametric_surfaces.ipynb <example_generate_parametric_surfaces.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
